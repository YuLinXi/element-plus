(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[152],{

/***/ 793:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm-browser.prod.js
var vue_esm_browser_prod = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist/templateLoader.js??ref--6!./node_modules/vue-loader/dist??ref--2-0!./website/md-loader!./website/docs/fr-FR/custom-theme.md?vue&type=template&id=a38bec60

var _hoisted_1 = {
  class: "content element-doc"
};

var _hoisted_2 = /*#__PURE__*/Object(vue_esm_browser_prod["n" /* createStaticVNode */])("<h2 id=\"theme\"><a class=\"header-anchor\" href=\"#theme\">¶</a> Thème</h2><p>Element Plus utilise le style BEM pour le CSS afin que vous puissiez écraser les règles prédéfinies facilement. Mais si vous avez besoin de remplacer des styles à une plus grande échelle , e.g. changer le thème de bleu à orange ou vert, les modifier une par une serait fastidieux. Nous fournissons ttrtois méthodes pour changer les variables de style.</p><h3 id=\"changer-la-couleur-du-theme\"><a class=\"header-anchor\" href=\"#changer-la-couleur-du-theme\">¶</a> Changer la couleur du thème</h3><p>Si vous avez juste besoin de changer la couleur du thème, le <a href=\"https://element-plus.github.io/theme-chalk-preview/#/en-US\">générateur de thème en ligne</a> est recommandé. La couleur du thème d&#39;Element Plus est un bleu clair et agréable. En le changeant, vous rendez Element Plus visuellement plus adapté à vos projets.</p><p>Le site précédent vous permet de visualiser et de télécharger un nouveau thème immédiatement (pour importer un nouveau thème, référez-vous à la partie &#39;Importer un thème personnalisé&#39; or &#39;Importer un thème de composant à la demande&#39; de cette section).</p><h3 id=\"mettre-a-jour-les-variables-scss-de-votre-projet\"><a class=\"header-anchor\" href=\"#mettre-a-jour-les-variables-scss-de-votre-projet\">¶</a> Mettre à jour les variables SCSS de votre projet</h3><p><code>theme-chalk</code> est écrit en SCSS. Si votre projet utilises SCSS, vous pouvez changer directement les variables d&#39;Élément. Créez un nouveau fichier, e.g. <code>element-variables.scss</code>:</p><pre><code class=\"hljs language-html\">/* couleur du thème */ $--color-primary: teal; /* chemin vers le fichier de\npolice, requis */ $--font-path: &#39;~element-plus/lib/theme-chalk/fonts&#39;; @import\n&quot;~element-plus/packages/theme-chalk/src/index&quot;;\n</code></pre><p>Puis dans le fichier d&#39;entrée, importez ce style au lieu de celui d&#39;Element:</p><pre><code class=\"hljs language-JS\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> ElementPlus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;./element-variables.scss&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.use(ElementPlus)\n</code></pre><div class=\"tip\"><p>Il est obligatoire de remplacer le chemin du fichier de police.</p></div><h3 id=\"outil-de-theme-cli\"><a class=\"header-anchor\" href=\"#outil-de-theme-cli\">¶</a> Outil de thème CLI</h3><p>Si votre projet n&#39;utilise pas SCSS, vous pouvez personnaliser le thème en utilisant notre outil en ligne de commande:</p><h4 id=\"installation\"><a class=\"header-anchor\" href=\"#installation\">¶</a> <strong>Installation</strong></h4><p>Installez le générateur de thème de manière globale ou locale. Une installation locale est recommandé afin que les personnes clonant votre dépôt bénéficient d&#39;une installation automatique via npm.</p><pre><code class=\"hljs language-shell\">npm i element-theme -g\n</code></pre><p>Installer ensuite le thème chalk depuis npm ou GitHub.</p><pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Via npm</span>\nnpm i element-theme-chalk -D\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Via GitHub</span>\nnpm i https://github.com/ElementUI/theme-chalk -D\n</code></pre><h4 id=\"initialisation-d-un-fichier-de-variable\"><a class=\"header-anchor\" href=\"#initialisation-d-un-fichier-de-variable\">¶</a> <strong>Initialisation d&#39;un fichier de variable</strong></h4><p>Après l&#39;installation des paquets ci-dessus, une commande appelée <code>et</code> devient disponible dans le CLI (si les paquets sont installés localement, utilisez <code>node_modules/.bin/et</code> à la place). Utilisez <code>-i</code> pour initialiser le fichier de variables, <code>element-variables.scss</code> par défaut. Vous pouvez spécifier n&#39;importe quel dossier comme sortie.</p><pre><code class=\"hljs language-shell\">et -i [nom du fichier]\n<span class=\"hljs-meta\">\n&gt;</span><span class=\"bash\"> ✔ Generator variables file</span>\n</code></pre><p>Dans <code>element-variables.scss</code> vous trouverez toutes les variables utilisées pour le style d&#39;Element, définies en SCSS. Voici un snippet:</p><pre><code class=\"hljs language-css\">$<span class=\"hljs-selector-tag\">--color-primary</span>: <span class=\"hljs-selector-id\">#409EFF</span> !<span class=\"hljs-selector-tag\">default</span>;\n$<span class=\"hljs-selector-tag\">--color-primary-light-1</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 10%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* 53a8ff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-2</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 20%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* 66b1ff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-3</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 30%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* 79bbff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-4</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 40%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* 8cc5ff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-5</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 50%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* a0cfff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-6</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 60%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* b3d8ff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-7</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 70%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* c6e2ff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-8</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 80%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* d9ecff */</span>\n$<span class=\"hljs-selector-tag\">--color-primary-light-9</span>: <span class=\"hljs-selector-tag\">mix</span>($<span class=\"hljs-selector-tag\">--color-white</span>, $<span class=\"hljs-selector-tag\">--color-primary</span>, 90%) !<span class=\"hljs-selector-tag\">default</span>; <span class=\"hljs-comment\">/* ecf5ff */</span>\n\n$<span class=\"hljs-selector-tag\">--color-success</span>: <span class=\"hljs-selector-id\">#67c23a</span> !<span class=\"hljs-selector-tag\">default</span>;\n$<span class=\"hljs-selector-tag\">--color-warning</span>: <span class=\"hljs-selector-id\">#e6a23c</span> !<span class=\"hljs-selector-tag\">default</span>;\n$<span class=\"hljs-selector-tag\">--color-danger</span>: <span class=\"hljs-selector-id\">#f56c6c</span> !<span class=\"hljs-selector-tag\">default</span>;\n$<span class=\"hljs-selector-tag\">--color-info</span>: <span class=\"hljs-selector-id\">#909399</span> !<span class=\"hljs-selector-tag\">default</span>;\n\n...\n</code></pre><h4 id=\"modifier-les-variables\"><a class=\"header-anchor\" href=\"#modifier-les-variables\">¶</a> <strong>Modifier les variables</strong></h4><p>Éditer <code>element-variables.scss</code>, e.g. en changeant la couleur du thème pour du rouge:</p><pre><code class=\"hljs language-CSS\">$<span class=\"hljs-selector-tag\">--color-primary</span>: <span class=\"hljs-selector-tag\">red</span>;\n</code></pre><h4 id=\"generer-le-theme\"><a class=\"header-anchor\" href=\"#generer-le-theme\">¶</a> <strong>Générer le thème</strong></h4><p>Après avoir sauvegardé le fichier de variables, utilisez <code>et</code> pour générer le thème. Vous pouvez activer le mode <code>watch</code> en ajoutant le paramètre <code>-w</code>. Si vous avez choisi le chemin du fichier de sortie, il vous faudra ajouter le paramètre <code>-c</code> avec le nom du fichier. Par défaut le thème généré est placé dans <code>./theme</code>. Vous pouvez spécifier le dossier de sortie grâce à <code>-o</code>.</p><pre><code class=\"hljs language-shell\">et\n<span class=\"hljs-meta\">\n&gt;</span><span class=\"bash\"> ✔ build theme font</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> ✔ build element theme</span>\n</code></pre><h3 id=\"use-custom-theme\"><a class=\"header-anchor\" href=\"#use-custom-theme\">¶</a> Use custom theme</h3><h4 id=\"importer-le-theme\"><a class=\"header-anchor\" href=\"#importer-le-theme\">¶</a> <strong>Importer le thème</strong></h4><p>Importing your own theme is just like importing the default theme, only this time you import the file built from &quot;Online Theme Roller&quot; or &quot;CLI tool&quot;:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;../theme/index.css&#39;</span>\n<span class=\"hljs-keyword\">import</span> ElementPlus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;element-plus&#39;</span>\n\ncreateApp(App).use(ElementPlus)\n</code></pre><h4 id=\"importer-le-theme-d-un-composant-sur-demande\"><a class=\"header-anchor\" href=\"#importer-le-theme-d-un-composant-sur-demande\">¶</a> <strong>Importer le thème d&#39;un composant sur demande</strong></h4><p>Si vous utilisez <code>babel-plugin-component</code> pour les imports sur demande, modifiez <code>.babelrc</code> et spécifiez <code>styleLibraryName</code> avec le chemin où votre thème est localisé relativement à <code>.babelrc</code>. N&#39;oubliez pas que <code>~</code> est requis:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;plugins&quot;</span>: [\n    [\n      <span class=\"hljs-string\">&quot;component&quot;</span>,\n      {\n        <span class=\"hljs-attr\">&quot;libraryName&quot;</span>: <span class=\"hljs-string\">&quot;element-plus&quot;</span>,\n        <span class=\"hljs-attr\">&quot;styleLibraryName&quot;</span>: <span class=\"hljs-string\">&quot;~theme&quot;</span>\n      }\n    ]\n  ]\n}\n</code></pre><p>Si vous n&#39;êtes pas familier avec <code>babel-plugin-component</code>, référez-vous à la page <a href=\"./#/fr-FR/component/quickstart\">Guide</a>. Pour plus d&#39;informations, jetez un oeil au <a href=\"https://github.com/ElementUI/element-theme\">dépôt du projet</a> de <code>element-theme</code>.</p>", 37);

function render(_ctx, _cache) {
  var _component_right_nav = Object(vue_esm_browser_prod["Q" /* resolveComponent */])("right-nav");

  return Object(vue_esm_browser_prod["H" /* openBlock */])(), Object(vue_esm_browser_prod["k" /* createBlock */])("section", _hoisted_1, [_hoisted_2, Object(vue_esm_browser_prod["p" /* createVNode */])(_component_right_nav)]);
}
// CONCATENATED MODULE: ./website/docs/fr-FR/custom-theme.md?vue&type=template&id=a38bec60

// CONCATENATED MODULE: ./website/docs/fr-FR/custom-theme.md

const script = {}
script.render = render

/* harmony default export */ var custom_theme = __webpack_exports__["default"] = (script);

/***/ })

}]);